plugins {
    id 'corda.common-app'
}

configurations {
    dockerImage {
        canBeConsumed = false
        transitive = false
    }

    dockerImageJdbc {
        canBeConsumed = false
        transitive = false
    }

    profilerAgent {
        canBeConsumed = false
        visible = false
    }
}

if (enableProfiling.toBoolean()) {
    dependencies {
        // Unzip the Java profiler into the Docker image.
        profilerAgent "com.yourkit.corda:yourkit-agent-linux-x86-64:$profilerVersion@zip"
        dockerImage provider { zipTree(configurations.profilerAgent.singleFile) }
    }
}

tasks.register('publishOSGiImage', DeployableContainerBuilder) {
    it.sourceFiles.setFrom(tasks.named('appJar', Jar))
    it.extraSourceFiles.setFrom(configurations.dockerImage)
    it.jdbcDriverFiles.setFrom(configurations.dockerImageJdbc)
    it.useShortName = true

    if (project.hasProperty('jibRemotePublish')) {
        remotePublish = jibRemotePublish.toBoolean()
    }

    if (project.hasProperty('doDockerHubPublish')) {
        dockerHubPublish = doDockerHubPublish.toBoolean()
    }

    if (project.hasProperty('isReleaseCandidate')) {
        releaseCandidate = isReleaseCandidate.toBoolean()
    }

    if (project.hasProperty('isNightly')) {
        nightlyBuild = isNightly.toBoolean()
    }

    if (project.hasProperty('isPreTest')) {
        preTest = isPreTest.toBoolean()
    }

    if (project.hasProperty('baseImage')) {
        baseImageName = baseImage
    }

    if (project.hasProperty('useDockerDaemon')) {
        useDaemon = useDockerDaemon.toBoolean()
    }

    if (project.hasProperty('multiArchSupport')) {
        multiArch = multiArchSupport.toBoolean()
    }

    // List of architectures for which to generate images, in the form "arch1=os,arch2=os"
    // Architecture name is set as the prefix for the tag image.
    if (project.hasProperty('targetArchitecures')) {
        Map<String, String> architectures = new HashMap<String, String>()
        String[] pairs = project.property("targetArchitecures").toString().split(",")

        for (int i = 0; i < pairs.length; i++) {
            String pair = pairs[i]
            String[] keyValue = pair.split("=")
            architectures.put(keyValue[0], keyValue[1])
        }

        targetArchitectures = architectures
    }

    if (project.hasProperty('workerBaseImageTag')) {
        baseImageTag = workerBaseImageTag
    }
}
